name: 로드 테스트 전용 CI/CD 파이프라인

on:
  push:
    branches:
      - feature/measure-time

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 레포지토리 클론
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. 빌드 과정에서 필요한 application.yml 파일 생성
      - name: Create application.yml for build
        run: |
          mkdir -p ./src/main/resources/
          echo "${{ secrets.LOAD_APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash
        env:
          APPLICATION_YML: ${{ secrets.LOAD_APPLICATION_YML }}

      # 3. Sentry Auth Token 설정 (디버그 로그 비활성화)
      - name: Set up Sentry Auth Token
        run: echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV

      # 4. Gradle 빌드 수행 (Sentry 인증 토큰 포함)
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-0402
          SENTRY_PROJECT: java-spring-boot

      # 5. Private Key 파일 생성 및 OpenSSH 형식으로 변환
      - name: Create SSH private key
        run: |
          echo "${{ secrets.LOAD_SSH_PRIVATE_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          ssh-keygen -p -m PEM -f /tmp/private_key.pem -N "" -q -o /tmp/private_key

      # 6. SCP로 JAR 파일을 EC2로 전송 (SFTP 대신 SCP 강제)
      - name: Deploy to EC2 via SCP (forced SCP mode)
        run: |
          scp -o ConnectTimeout=30 -T -v -i /tmp/private_key -o StrictHostKeyChecking=no ./build/libs/oceanAcademy-0.0.1-SNAPSHOT.jar ${{ secrets.SERVER_USER }}@${{ secrets.LOAD_SERVER_HOST }}:${{ secrets.REMOTE_PROJECT_PATH }}/

      # 7. Private Key 파일 삭제 (보안)
      - name: Delete private key
        run: rm /tmp/private_key

      # 8. SSH로 EC2 서버에 접속하여 JAR 파일 전송 및 실행
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.LOAD_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.LOAD_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # 서버에서 기존 실행 중인 애플리케이션 종료
            pkill -f 'oceanAcademy-0.0.1-SNAPSHOT.jar' || true
            # JAR 파일 실행 (nohup으로 백그라운드 실행)
            nohup java \
              -Dcom.sun.management.jmxremote \
              -Dcom.sun.management.jmxremote.local.only=false \
              -Dcom.sun.management.jmxremote.port=${{ secrets.VISUAL_JVM_PORT }} \
              -Dcom.sun.management.jmxremote.ssl=false \
              -Dcom.sun.management.jmxremote.authenticate=false \
              -Djava.rmi.server.hostname=${{ secrets.LOAD_SERVER_HOST }} \
              -Dcom.sun.management.jmxremote.rmi.port=${{ secrets.VISUAL_JVM_PORT }} \
              -jar ${{ secrets.REMOTE_PROJECT_PATH }}/oceanAcademy-0.0.1-SNAPSHOT.jar > ${{ secrets.REMOTE_PROJECT_PATH }}/output.log 2>&1 &
            
            # ServerAgent가 실행 중인지 확인하는 명령어
            if pgrep -f 'ServerAgent' > /dev/null; then
                echo "ServerAgent is already running."
            else
                echo "Starting ServerAgent..."
                cd /opt/ServerAgent-2.2.3
                sudo ./startAgent.sh --tcp-port ${{ secrets.SERVER_AGENT_PORT }} --udp-port 0
            fi