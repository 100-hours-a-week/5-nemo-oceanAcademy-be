name: 로드 테스트 전용 CI/CD 파이프라인

on:
  push:
    branches:
      - feature/measure-time

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 레포지토리 클론
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. 빌드 과정에서 필요한 application.yml 파일 생성
      - name: Create application.yml for build
        run: |
          mkdir -p ./src/main/resources/
          echo "${{ secrets.LOAD_APPLICATION_YML }}" > ./src/main/resources/application.yml
        shell: bash
        env:
          APPLICATION_YML: ${{ secrets.LOAD_APPLICATION_YML }}

      # 3. Sentry Auth Token 설정 (디버그 로그 비활성화)
      - name: Set up Sentry Auth Token
        run: echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV

      # 4. Gradle 빌드 수행 (Sentry 인증 토큰 포함)
      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-0402
          SENTRY_PROJECT: java-spring-boot

      # 5. SCP로 JAR 파일을 EC2로 전송 (패턴 사용)
      - name: Deploy build outputs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LOAD_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.LOAD_SSH_PRIVATE_KEY }}
          port: 22
          source: "build/libs/oceanAcademy-*.jar" # oceanAcademy로 시작하는 모든 JAR 파일 전송
          strip_components: 1
          target: "/home/ubuntu/code/"

      # 6. SSH로 EC2 서버에 접속하여 JAR 파일 전송 및 실행
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.LOAD_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.LOAD_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            /home/${{ secrets.SERVER_USER }}/stop_and_start.sh