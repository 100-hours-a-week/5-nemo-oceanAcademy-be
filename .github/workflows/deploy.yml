name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ktb-0402
          SENTRY_PROJECT: java-spring-boot

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 이미지 빌드 및 Push (브랜치별 구분)
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            docker build -t nemo-be:${{ github.sha }} .
            docker tag nemo-be:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/nemo-be:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USERNAME }}/nemo-be:${{ github.sha }}
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            docker build -t nemo-dev-be:${{ github.sha }} .
            docker tag nemo-dev-be:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/nemo-dev-be:${{ github.sha }}
            docker push ${{ secrets.DOCKER_USERNAME }}/nemo-dev-be:${{ github.sha }}
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH를 위한 디렉토리 및 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.MAIN_SERVER_HOST }} >> ~/.ssh/known_hosts || true
          ssh-keyscan -H ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts || true

      - name: EC2 배포 - Blue/Green 서버 실행 (브랜치별)
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            SERVER_HOST=${{ secrets.MAIN_SERVER_HOST }}
            NEW_TARGET_GROUP_ARN=${{ secrets.MAIN_BLUE_TARGET_GROUP_ARN }}
            LISTENER_ARN=${{ secrets.MAIN_ALB_LISTENER_ARN }}
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/nemo-be:${{ github.sha }}"
            SPRING_PROFILE=prod
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            SERVER_HOST=${{ secrets.DEV_SERVER_HOST }}
            NEW_TARGET_GROUP_ARN=${{ secrets.DEV_BLUE_TARGET_GROUP_ARN }}
            LISTENER_ARN=${{ secrets.DEV_ALB_LISTENER_ARN }}
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/nemo-dev-be:${{ github.sha }}"
            SPRING_PROFILE=dev
          fi

          # application.yml 파일 생성
          mkdir -p ~/app/config/
          echo "${{ secrets.APPLICATION_YML }}" > ~/app/config/application.yml

          # Green 또는 Blue 서버 실행 여부 확인
          EXISTING_CONTAINER=$(docker ps --filter "name=nemo-blue" --filter "status=running" --format "{{.Names}}")
          if [ -n "$EXISTING_CONTAINER" ]; then
            NEW_PORT=5001
            NEW_CONTAINER_NAME="nemo-green"
            echo "Blue 서버가 실행 중이므로 Green 서버를 실행합니다."
          else
            NEW_PORT=5000
            NEW_CONTAINER_NAME="nemo-blue"
            echo "Green 서버가 실행 중이므로 Blue 서버를 실행합니다."
          fi

          # 새로운 컨테이너 실행
          docker run -d -p $NEW_PORT:8080 --name $NEW_CONTAINER_NAME \
            -v ~/app/config/application.yml:/app/application.yml \
            -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \
            $IMAGE_NAME

      - name: ALB 트래픽 전환 및 헬스체크 (브랜치별)
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            NEW_TARGET_GROUP_ARN=${{ secrets.MAIN_BLUE_TARGET_GROUP_ARN }}
            LISTENER_ARN=${{ secrets.MAIN_ALB_LISTENER_ARN }}
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            NEW_TARGET_GROUP_ARN=${{ secrets.DEV_BLUE_TARGET_GROUP_ARN }}
            LISTENER_ARN=${{ secrets.DEV_ALB_LISTENER_ARN }}
          fi

          # ALB에서 타겟 그룹을 새로운 대상 그룹으로 전환
          aws elbv2 modify-listener --listener-arn $LISTENER_ARN \
            --default-actions Type=forward,TargetGroupArn=$NEW_TARGET_GROUP_ARN

          # Health Check 상태를 확인
          for ((i=1; i<=5; i++)); do
            echo "헬스 체크 상태 확인: $i 번째 시도"
            HEALTHY_HOST_COUNT=$(aws elbv2 describe-target-health --target-group-arn $NEW_TARGET_GROUP_ARN --query 'TargetHealthDescriptions[?TargetHealth.State==`healthy`]' | jq length)
            if [ "$HEALTHY_HOST_COUNT" -gt 1 ]; then
              echo "서버가 충분한 트래픽을 처리 중입니다."
              break
            fi
            sleep 10
          done

      - name: Docker 컨테이너 로그 출력
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            SERVER_HOST=${{ secrets.MAIN_SERVER_HOST }}
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            SERVER_HOST=${{ secrets.DEV_SERVER_HOST }}
          fi
          
          EXISTING_CONTAINER=$(docker ps --filter "name=nemo-blue" --filter "status=running" --format "{{.Names}}")
          if [ -n "$EXISTING_CONTAINER" ]; then
            docker logs nemo-blue
          else
            docker logs nemo-green
          fi
